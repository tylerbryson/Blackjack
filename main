
import java.util.Scanner;
import java.util.Vector;

public class BlackJack 
{
	
	private static Scanner scnr = new Scanner(System.in);
	private int[] deck;
	private int currentPos;
	private Vector hand;

	public static void main(String[] args) //Class Only used to create Variables
	{ 
		 new BlackJack().start();	
	}
	public void start()//Creates The Money 
	{ 
		
		int money; // Amount of money the user has.
		int bet;   // Amount user bets on a game.
		boolean userWins; // Checks if the user won the game
		
		System.out.println("Welcome to blackjack.\n");
		
		money = 1000; // User starts with $500.
		
		 while (true)
	        {
	            System.out.println("You have " + money + " dollars.");
	            do
	            {
	                System.out.println("How many dollars do you want to bet?  (Enter 0 to end.)");
	                System.out.print("? ");
	                bet = scnr.nextInt();
	                if (bet < 0 || bet > money)
	                {
	                    System.out.println("Your answer must be between 0 and " + money + '.');
	                }
	            } while (bet < 0 || bet > money);
	            if (bet == 0)
	            {
	                break;
	            }
	            userWins = playTheGame();
	            if (userWins)
	            {
	                money = money + bet;
	            } else
	            {
	                money = money - bet;
	            }
	            System.out.println();
	            if (money == 0)
	            {
	                System.out.println("You ran out of Money!");
	                break;
	            }
	        }

	        System.out.println();
	        System.out.println("You leave with $" + money + '.');
		
	}//End of 'Start'
	
	private boolean playTheGame() 
	{
		
		// Return true if the user wins, false if the user loses.
		
		Vector dealerHand;  // The dealer's hand.
		Vector userHand; // The user's hand.
		
		 deck = new int[52]; // Create an unshuffled deck of cards.
		 int cardCount = 0;
		 for (int suit = 0; suit <= 3; suit++)
		 {
	            for (int value = 1; value <= 13; value++)
	            {
	                deck[cardCount] = value;
	                cardCount++;
	            }
	        }
		 currentPos = 0;
		 dealerHand = new Vector();
	     userHand = new Vector();

		
		 shuffle(); //Shuffle the deck, then deal two cards to each player.
		 
		 	dealerHand.addElement(dealCard());
	        dealerHand.addElement(dealCard());
	        userHand.addElement(dealCard());
	        userHand.addElement(dealCard());
	        
	        System.out.print("\n\n");
	        
	        if (value(dealerHand) == 21)// Check if one of the players has Blackjack
	        {
	            System.out.println("Dealer has the " + showCard(getCard(dealerHand, 0)) + " and the " + showCard(getCard(dealerHand, 1)) + ".");
	            System.out.println("User has the " + showCard(getCard(userHand, 0)) + " and the " + showCard(getCard(userHand, 1)) + ".");
	            System.out.println();
	            System.out.println("Dealer has Blackjack.  Dealer wins.");
	            return false;
	        }

	        if (value(userHand) == 21)
	        {
	            System.out.println("Dealer has the " + showCard(getCard(dealerHand, 0)) + " and the " + showCard(getCard(dealerHand, 1)) + ".");
	            System.out.println("User has the " + showCard(getCard(userHand, 0)) + " and the " + showCard(getCard(userHand, 1)) + ".");
	            System.out.println();
	            System.out.println("You have Blackjack.  You win.");
	            return true;
	        }
	        while (true)
	        {

	            // Display user's cards, and let user decide to Hit or Stand.

	            System.out.println();
	            System.out.println();
	            System.out.println("Your cards are:");
	            for (int i = 0; i < userHand.size(); i++)
	            {
	                System.out.println("    " + showCard(getCard(userHand, i)));
	            }
	            System.out.println("Your total is " + value(userHand));
	            System.out.println();
	            System.out.println("Dealer is showing the " + showCard(getCard(dealerHand, 0)));
	            System.out.println();
	            System.out.print("Hit (H) or Stand (S)? ");
	            char userAction;  // User's response, 'H' or 'S'.
	            do
	            {
	                userAction = Character.toUpperCase(scnr.next().charAt(0));//Changes to capital of they typer lower case 'h' or 's'
	                if (userAction != 'H' && userAction != 'S')
	                {
	                    System.out.print("Please respond H or S:  ");
	                }
	            } while (userAction != 'H' && userAction != 'S');//If the user Hits, the user gets a card.  If the user Stands, the
	            												 //dealer gets a chance to draw and the game ends.

	            if (userAction == 'S')
	            {
	                // Loop ends; user is done taking cards.
	                break;
	            } else
	            {  // userAction is 'H'.
	                // Give the user a card.  If the user goes over 21, the user loses.
	                int newCard = dealCard();
	                userHand.addElement(newCard);
	                System.out.println();
	                System.out.println("User hits.");
	                System.out.println("Your card is the " + showCard(newCard));
	                System.out.println("Your total is now " + value(userHand));
	                if (value(userHand) > 21)
	                {
	                    System.out.println();
	                    System.out.println("You busted by going over 21.  You lose.");
	                    System.out.println("Dealer's other card was the " + showCard(getCard(dealerHand, 1)));
	                    return false;
	                }
	            }
	        }
	        System.out.println();
	        System.out.println("User stands.");
	        System.out.println("Dealer's cards are");
	        System.out.println("    " + showCard(getCard(dealerHand, 0)));
	        System.out.println("    " + showCard(getCard(dealerHand, 1)));
	        while (value(dealerHand) <= 16)
	        {
	            int newCard = dealCard();
	            System.out.println("Dealer hits and gets the " + showCard(newCard));
	            dealerHand.addElement(newCard);
	        }
	        System.out.println("Dealer's total is " + value(dealerHand));

	        //Declares winner

	        System.out.println();
	        if (value(dealerHand) > 21)
	        {
	            System.out.println("Dealer busted by going over 21.  You win.");
	            return true;
	        } else
	        {
	            if (value(dealerHand) == value(userHand))
	            {
	                System.out.println("Dealer wins on a tie.  You lose.");
	                return false;
	            } else
	            {
	                if (value(dealerHand) > value(userHand))
	                {
	                    System.out.println("Dealer wins, " + value(dealerHand) + " points to " + value(userHand) + ".");
	                    return false;
	                } else
	                {
	                    System.out.println("You win, " + value(userHand) + " points to " + value(dealerHand) + ".");
	                    return true;
	                }
	            }
	        }

		
	}
	
	 public int dealCard()
	    {
	        // Deals one card from the deck and returns it.
	        if (currentPos == 52)
	        {
	            shuffle();
	        }
	        currentPos++;
	        return deck[currentPos - 1];
	    }
	
	public void shuffle()
    {
        // Put all the used cards back into the deck, and shuffle it into
        // a random order.
        for (int i = 51; i > 0; i--)
        {
            int rand = (int) (Math.random() * (i + 1));
            int temp = deck[i];
            deck[i] = deck[rand];
            deck[rand] = temp;
        }
        currentPos = 0;
    }
	public int getCard(Vector hand, int position) {
        // Get the card from the hand in given position, where positions
        // are numbered starting from 0.  If the specified position is
        // not the position number of a card in the hand, then null
        // is returned.
        if (position >= 0 && position < hand.size())
        {
            return ((Integer)hand.elementAt(position)).intValue();
        } else
        {
            return 0;
        }
    }
	public int value(Vector hand)
    {

        int val;      // The value computed for the hand.
        boolean ace;  // Used if the hand gets an ace
        int cards;    // Number of cards in the hand.

        val = 0;
        ace = false;
        cards = hand.size();

        for (int i = 0; i < cards; i++)
        {
            // Add the value of the i card in the hand.
            int card;    // The i card;
            int cardVal;  // The blackjack value of the i card.
            card = getCard(hand, i);
            cardVal = getCardValue(card);  // The normal value, 1 to 13.
            if (cardVal > 10)
            {
                cardVal = 10;   // For a Jack, Queen, or King.
            }
            if (cardVal == 1)
            {
                ace = true;     // There is at least one ace.
            }
            val = val + cardVal;
        }

        if (ace == true && val + 10 <= 21) //val counts ace as 1 or 11 by checking if the score is less than or equal to 21
        {
            val = val + 10;
        }

        return val;

    }
    public int getCardValue(int card)
    {
        int result = card;
        switch (card)
        {
            case 11:
            case 12:
            case 13:
                result =  10;
        }
        return result;
    }
    public String showCard(int card)
    {
        switch (card)
        {
            case 1:
                return "Ace";
            case 2:
                return "2";
            case 3:
                return "3";
            case 4:
                return "4";
            case 5:
                return "5";
            case 6:
                return "6";
            case 7:
                return "7";
            case 8:
                return "8";
            case 9:
                return "9";
            case 10:
                return "10";
            case 11:
                return "Jack";
            case 12:
                return "Queen";
            case 13:
                return "King";
            default:
                return "??";
        }
    }

}//End of Class
